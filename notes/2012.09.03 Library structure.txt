

The gif-generating code is now reasonably mature and I want to do the obvious,
silly thing: draw a doodle and turn it immediately into a gif.

This will involve merging two projects with different structure that I have been
accessing in different ways:

● This project has the following structure:
  ○ util:
    ◎ interfaces for drawing stuff at points in time
    ◎ time intervals
        ◉ interfaces for normal and mutable
        ◉ impl for time interval
        ◉ interface and a few impl of interval tweakers
        ◉ fetcher for looking up intervals before moment / containing moment
    ◎ smallest possible math util function
    ◎ picture-in-picture time-dependent drawing helper
        ◉ small helper for moving, fixed-size PiPs
    ◎ a gob of search-related stuff
    ◎ (library-only config)
    ◎ (an html file loading a library-only config)
  ○ images:
    ◎ hsva color picker sprites
  ○ notes:
    ◎ words words words
  ○ *.json:
    ◎ config for icon-drawing tool, draw-and-replay example
  ○ goals.txt belongs in that notes dir
  ○ *.js:
    ◎ extern for webkit requestanimationframe <-- extern
    ◎ class-blessing JSON deserializer <-- util
    ◎ JSON pretty-printer <-- util
    ◎ path painter <-- util
    ◎ drawing composed from multiple replays, plain & mutable
    ◎ layout/draw multiple time-dependent drawings simultaneously 
    ◎ subcanvas: implementations of the util drawables as UI components
      ◉ includes physical space to virtual space remapping w/ events
      ◉ lol @ EventRegion, resembles proposed, unimpl canvas feature
    ◎ motion capture controller and model
    ◎ motion capture time-dependent drawing
    ◎ captured icons
    ◎ icon painting for style picker
    ◎ style picker (nastily coupled?)
    ◎ drawing space coupled with replay and capture / style UI
    ◎ local storage based Scribble store
    ◎ grand coupling:
      ◉ Scribble store
      ◉ UI
      ◉ sequential and simultaneous time-dependent drawing
      ◉ animated replay 
  ○ scaffolding html pages
  ○ css for styling ui components
  ○ plovr
  ○ serve script
    
● The gif project has the following structure:
  ○ notes.txt - thoughts, recorded
  ○ serve.sh - start plovr going with all configurations
  ○ build
    ◎ plovr
    ◎ makefile
    ◎ compiled outputs
  ○ config
    ◎ compilation config json files
    ◎ compiled outputs, cuz my make-fu is weak
  ○ externs
    ◎ extern definition specializing Uint8Array.subarray
      ◉ not clear if this definition actually works
  ○ gifs
    ◎ files to test on (read via local webserver)
  ○ lib
    ◎ extraneous, versioned google closure library as git module
    ◎ extraneous, versioned subcanvas as git module
  ○ src: library functionality:
    ◎ gif-related:
      ◉ gif object model
      ◉ gif describer
      ◉ gif-to-canvas renderer
    ◎ data streams
      ◉ bitwise reading and writing
      ◉ readers and writers for arraybuffers / uint8arrays
      ◉ readers and writers for length-prefixed block encoding
    ◎ lzw
      ◉ non-used, unknown correctness lzw code
      ◉ correct, ~fast variable length lzw reading (attribute to Go std lib)
      ◉ correct, slow VL lzw writing code (should imitate Go std lib instead)
    ◎ testing helpers
      ◉ better-than-printf trace recording tool
      ◉ file picker for loading arraybuffer
  ○ src/test: application and library-checking code
    ◎ few tests covering bitwise stuff, stream reader, VL lzw writer
    ◎ gif generation example
    ◎ gif rendering example
    ◎ gif describing example
  ○ test
    ◎ one html per 'entry point' / 'program'
      ◉ each html is empty except for including a (plovr-served) script


● The essentials in projects such as this are:
  ○ infrastructure
    ◎ plovr
    ◎ plovr configs
      ◉ for typechecking (zeroth-order testing)
      ◉ for tests
      ◉ for demos
      ◉ for compilation/packaging (assuming I ever get that far)
    ◎ Makefile
      ◉ serve
      ◉ compile / typecheck
    ◎ serve script (convenience calling `make serve`)
  ○ source
  ○ resources 
    ◎ scaffolding page per entry point
    ◎ test or demo inputs
    ◎ images
    ◎ css
